import 'package:flutter/material.dart';
import 'button.dart';

class SudokuPage extends StatefulWidget {
  const SudokuPage({super.key});

  @override
  _SudokuPageState createState() => _SudokuPageState();
}

class _SudokuPageState extends State<SudokuPage> {
  final List<List<int>> jawaban = [
    [9, 2, 1, 8, 6, 5, 4, 3, 7],
    [4, 8, 5, 3, 2, 7, 9, 1, 6],
    [6, 7, 3, 9, 1, 4, 8, 2, 5],
    [2, 4, 9, 5, 3, 1, 6, 7, 8],
    [1, 6, 7, 2, 4, 8, 3, 5, 9],
    [5, 3, 8, 6, 7, 9, 1, 4, 2],
    [7, 5, 4, 1, 9, 6, 2, 8, 3],
    [3, 1, 6, 7, 8, 2, 5, 9, 4],
    [8, 9, 2, 4, 5, 3, 7, 6, 1],
  ];

  final List<List<int>> initialBoard = [
    [9, 0, 0, 8, 6, 5, 0, 3, 7],
    [4, 8, 0, 3, 2, 0, 9, 1, 6],
    [6, 0, 3, 9, 1, 4, 8, 0, 5],
    [2, 4, 9, 0, 3, 1, 6, 7, 0],
    [1, 6, 7, 2, 4, 0, 3, 0, 9],
    [0, 3, 8, 6, 7, 9, 0, 4, 2],
    [7, 5, 0, 1, 0, 0, 2, 8, 3],
    [3, 0, 6, 7, 8, 2, 0, 9, 4],
    [8, 9, 2, 4, 0, 3, 7, 6, 0],
  ];

  late List<List<int>> board;

  int? selectedRow;
  int? selectedCol;

  @override
  void initState() {
    super.initState();
    board = List.generate(
      9,
      (i) => List.generate(9, (j) => initialBoard[i][j]),
    );
  }

  void selectCell(int row, int col) {
    if (initialBoard[row][col] != 0) {
      return;
    }
    setState(() {
      selectedRow = row;
      selectedCol = col;
    });
  }

  void inputNumber(int number) {
    if (selectedRow != null && selectedCol != null) {
      if (initialBoard[selectedRow!][selectedCol!] == 0) {
        setState(() {
          board[selectedRow!][selectedCol!] = number;
        });
      }
    }
  }

  void clearCell() {
    if (selectedRow != null && selectedCol != null) {
      if (initialBoard[selectedRow!][selectedCol!] == 0) {
        setState(() {
          board[selectedRow!][selectedCol!] = 0;
        });
      }
    }
  }

  Border _buildCellBorder(int row, int col) {
    return Border(
      top: BorderSide(width: row % 3 == 0 ? 2 : 0.5, color: Colors.black54),
      left: BorderSide(width: col % 3 == 0 ? 2 : 0.5, color: Colors.black54),
      right: BorderSide(
        width: (col + 1) % 3 == 0 ? 2 : 0.5,
        color: Colors.black54,
      ),
      bottom: BorderSide(
        width: (row + 1) % 3 == 0 ? 2 : 0.5,
        color: Colors.black54,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sudoku Flutter'), centerTitle: true),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 360),
                child: AspectRatio(
                  aspectRatio: 1,
                  child: Container(
                    decoration: BoxDecoration(
                      border: Border.all(width: 2, color: Colors.black87),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: GridView.builder(
                      physics: const NeverScrollableScrollPhysics(),
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 9,
                          ),
                      itemCount: 81,
                      itemBuilder: (context, index) {
                        int row = index ~/ 9;
                        int col = index % 9;
                        bool isClue = initialBoard[row][col] != 0;

                        // Cek apakah input salah
                        bool isWrongInput = false;
                        if (!isClue && board[row][col] != 0) {
                          if (board[row][col] != jawaban[row][col]) {
                            isWrongInput = true;
                          }
                        }

                        // Cek apakah cell ini berada di baris, kolom, atau blok yang sama dengan cell yang dipilih
                        bool isHighlighted = false;
                        if (selectedRow != null && selectedCol != null) {
                          // Cek baris dan kolom
                          if (row == selectedRow || col == selectedCol) {
                            isHighlighted = true;
                          } else {
                            // Cek blok 3x3
                            int selectedBlockRow = selectedRow! ~/ 3;
                            int selectedBlockCol = selectedCol! ~/ 3;
                            int currentBlockRow = row ~/ 3;
                            int currentBlockCol = col ~/ 3;
                            if (selectedBlockRow == currentBlockRow &&
                                selectedBlockCol == currentBlockCol) {
                              isHighlighted = true;
                            }
                          }
                        }

                        return GestureDetector(
                          onTap: () => selectCell(row, col),
                          child: Container(
                            decoration: BoxDecoration(
                              color: isWrongInput
                                  ? Colors.red[100]
                                  : isHighlighted
                                  ? Colors.blue[100]
                                  : isClue
                                  ? Colors.green[100]
                                  : Colors.white,
                              border: _buildCellBorder(row, col),
                            ),
                            child: Center(
                              child: Text(
                                board[row][col] == 0
                                    ? ''
                                    : board[row][col].toString(),
                                style: TextStyle(
                                  fontWeight: isClue
                                      ? FontWeight.bold
                                      : FontWeight.normal,
                                  fontSize: 20,
                                  color: isClue
                                      ? Colors.black
                                      : isWrongInput
                                      ? Colors.red
                                      : Colors.blue[700],
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 15),
              // button
              ButtonWidget(inputNumber: inputNumber),
            ],
          ),
        ),
      ),
    );
  }
}
